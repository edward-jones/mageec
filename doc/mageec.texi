\input texinfo
@setfilename mageec.info
@afourpaper
@settitle MAGEEC Command Line Tool
@paragraphindent 0

@copying
This design document is for MAGEEC.
This manual is for MAGEEC.

Copyright @copyright{} 2015 Embecosm Limited.
@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts. A copy of the license is included in the section entitled
``GNU Free Documentation License''.
@end quotation
@end copying

@titlepage
@title MAGEEC Command Line Tool
@subtitle MAchine Guided Energy Efficient Compilation
@author Edward Jones
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@node Top
@top Scope of this Document
This document describes the MAGEEC standalone command.

@menu
* MAGEEC Command Line Tool::
* GNU Free Documentation License::
@end menu

@node MAGEEC Command Line Tool
@chapter MAGEEC Command Line Tool

@section Overview

The MAGEEC command line utility is a standalone command used
to perform some important tasks, as well as some maintainance
procedures.

@section Design

The command line utility is used to perform the important
task of creating a new database file, adding results to
an existing database and training machine learners. It is
also used to perform some maintenance tasks including
appending one database to another database, and garbage
collecting stale entries from a database file.

The utility is linked against the MAGEEC core library
which gives it access to the the machine learners and the
MAGEEC database file.

@section Usage

The tool can be run in various modes, all of which require a
database as the first argument and the mode as the second
argument. It can also be run standalone, to access some
utility methods.

If a 'mode' argument is specified, then it is always the
second argument, immediately following the argument for
the database which is being operated on. The mode arguments
are as follows:

@itemize
@item
@b{--create} - Create a new empty database.

@item
@b{--append} @var{DATABASE} - Append another database to the current
database. The following argument is the database to be appended

@item
@b{--train} - Train the database using the stored training data,
using one or more machine learners and targetting one or
more metrics.

@item 
@b{--garbage-collect} - Remove any entries in the database which
are not referenced by any result.

@item
@b{--add-results} @var{RESULTS}.csv - Add results to the database
from a results csv file provided in the following argument.
@end itemize

There are some arguments which are required when using the
--train mode:

@itemize
@item
@b{--metric} @var{VALUE} - Required in --train mode. Specifies
which metrics the database should be trained for. The
value provided in the following argument corresponds to
the 'metric' field of the results which were added to the
database, and is an arbitrary string identifier. Multiple
--metric arguments may be provided.

@item
@b{--ml} @var{VALUE} - Required in --train mode. Specifies which
machine learner interfaces should be trained. This argument
may be a string identifier of a builtin machine learner, or
it may be a shared object for a machine learner plugin
implementing the machine learner interface. Multiple --ml
arguments may be provided.
@end itemize

There are also some optional arguments which can be
provided in any mode:

@itemize
@item
@b{--help} - Print out help for the tool.

@item
@b{--version} - Print the version of MAGEEC.

@item
@b{--debug} - Enable debug output from the tool.

@item
@b{--database-version} - Print the version of the database
being used. Ignore if no database is provided.

@item
@b{--sql-trace} - Print a trace of all SQL queries executed by
the tool.

@item
@b{--print-ml-interfaces} - Print all of the interfaces available
to the framework.

@item
@b{--print-mls} - Print all of the machine learners in the
database.
@end itemize

@subsection Training

When training, a database is specified, along with the machine
learners and metrics to train for. There are two machine learners
built into MAGEEC, C5.0 and 1-NN which are identified to the
tool as 'c50' and '1nn' respectively. In addition to these
machine learners, a user can provide a shared library which
implements the machine learner interface as a plugin instead
of a string identifier.

The training process trains for all combinations of machine
learns and metrics. So if you provided both 'c50' and '1nn'
as machine learners, and specified that you wanted to train
for 'energy' and 'size', then the following machine learners
would be trained.

@itemize
@item
C5.0 for energy
@item
C5.0 for size
@item
1NN for energy
@item
1NN for size
@end itemize

The 'metric' arguments describe the metric that is being
trained for. When results are added to the database, each
result has an associated string identifier which describes
what quality of the program the result is measuring.

@subsection Results input format

Results are added to the database through the '--add-results'
argument. This argument takes a path to a csv files which
has the following format:

@example
@var{SRC_PATH},@var{PROGRAM_UNIT_TYPE},@var{PROGRAM_UNIT_ID},result,@var{COMPILATION_ID},@var{METRIC},@var{VALUE}
@end example

The role of each variable is as follows:

@itemize
@item
@var{SRC_PATH} - The path to the source program. This identifies the
source file which the features correspond to.

@item
@var{PROGRAM_UNIT_TYPE} - The type of program unit which the
features are for. Currently used values are @b{module} and
@b{function}.

@item
@var{PROGRAM_UNIT_ID} - A string identifier of the specific
program unit in the file. The tuple consisting of @var{SRC_PATH},
@var{PROGRAM_UNIT_TYPE} and @var{PROGRAM_UNIT_ID} is enough to
unique identify the program unit which the feature set corresponds
to.

@item
@var{COMPILATION_ID} - A numerical identifier which identifies
the compilation this result should be associated with in the
database file.

@item
@var{METRIC} - String identifier for the metric which the
result is for. Common metrics are @b{energy}, @b{time} and
@b{size}, however any string value may be used.

@item
@var{VALUE} - Decimal value of the result.
@end itemize

An example of a potential results input file is as follows:

@example
/home/mageec/test/banana.c,module,banana.c,result,15826111,energy,19267.0
/home/mageec/test/banana.c,function,potato,result,93735000,energy,2745.0
...
@end example

@section Example usage

@example
mageec --help
@end example

@example
mageec --version
@end example

@example
mageec --print-ml-interfaces --ml my-ml-plugin.so
@end example

@example
mageec database.db --create
@end example

@example
mageec database.db --garbage-collect
@end example

@example
mageec database.db --append other-database.db --debug
@end example

@example
mageec database.db --train --ml c50 --ml 1nn --metric energy --debug
@end example

@node GNU Free Documentation License
@chapter GNU Free Documentation License
@include fdl-1.3.texi

@bye
