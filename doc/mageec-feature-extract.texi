\input texinfo
@setfilename mageec-feature-extractor.info
@afourpaper
@settitle MAGEEC GCC Feature Extractor
@paragraphindent 0

@copying
This design document is for MAGEEC.
This manual is for MAGEEC.

Copyright @copyright{} 2015 Embecosm Limited.
@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts. A copy of the license is included in the section entitled
``GNU Free Documentation License''.
@end quotation
@end copying

@titlepage
@title MAGEEC GCC Feature Extractor
@subtitle MAchine Guided Energy Efficient Compilation
@author Edward Jones
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@node Top
@top Scope of this Document
This document describes the MAGEEC Feature Extraction plugin.

@menu
* MAGEEC GCC Feature Extractor::
* Glossary::
* GNU Free Documentation License::
@end menu

@node MAGEEC GCC Feature Extractor
@chapter MAGEEC GCC Feature Extractor

@section Overview

The MAGEEC feature extractor plugin is a plugin to perform
extraction of static features from C, C++ and Fortran source code
by using GCC. It is an open source plugin which extracts the
features from the GCC internal gimple representation.

@center @image{"images/feature-extractor", 6in}

@section Design

The feature extractor is a pass which is injected into the
normal GCC pass sequence. This pass runs early in the pass
pipeline before other optimization passes have run, and
farms features for functions and modules in the program.

There are two groups of features which are extracted by the
plugin, function-level features and module-level features.
Function level features describe properties of individual
functions, and module level features describe properties
of the module, but 

The plugin integrates with MAGEEC, storing extracted
features in the MAGEEC database. The output from the
feature extractor is a csv file containing an identifier
of an individual program unit in the program, as well
as the identifier of the feature set for that program
unit in the database.

Currently, the features extracted by the plugin are all
integer features. The types of the features which could
be extracted by MAGEEC are limited to the features which
can be intepreted by one of the machine learners. There is
no point in extracting features which a machine learner
cannot understand.

@c @image Picture of integration with pass pipeline
@c @image Picture of the integration with MAGEEC
@c @image Picture of the output file format

@section Features

A list of the function features and module features
extracted by the feature extractor can be found in
the glossary.

@xref{GCC plugin features}

Each feature is assigned a unique identifier. Module
features are primarily derived from the function
features using a number of reduction functions,
including the maximum, minimum, mean, median and range.

@section Usage

The plugin is found in the library directory of the
installation of MAGEEC. It is used by providing the
feature extractor library as a plugin to the gcc, g++ or
gfortran drivers through the -fplugin option.

@example
gcc -fplugin=libgcc_feature_extract.so
@end example

Arguments are provided to the plugin through
-fplugin-arg-libgcc_feature_extract-@var{arg_name}

Many arguments are optional, but some are required:

Required arguments:
@itemize
@item
@b{database} - This is the MAGEEC database which the extracted
features will be added to

@item
@b{out} - This is the output file which will store a mapping
from each program unit to the identifier of the features
for that program unit in the database. New entries are
appended to the end of this file.
@end itemize

Optional arguments:
@itemize
@item
@b{plugin-info} - Print information about the plugin.

@item
@b{version} - Print the version of the plugin.

@item
@b{framework-version} - Print the version of MAGEEC which this
plugin was built against.

@item
@b{database-version} - Print the version of the database
provided.

@item
@b{debug} - Enable debug output

@item
@b{sql-trace} - Enable a trace of all SQL queries executed
@end itemize

When using this plugin to build projects which use autoconf
and CMake build systems it is necessary to inject these flags
into the build. This can often be achieved by setting the CFLAGS
and CXXFLAGS environment variables, or through the
@i{-DCMAKE_C_FLAGS} and @i{-DCMAKE_CXX_FLAGS} arguments when
running CMake.

@subsection Feature output format

When the feature extractor is run, it extracts features for
each program unit and places them into the output file. The
output file is a csv file where each entry has the following
format:

@example
@var{SRC_PATH},@var{PROGRAM_UNIT_TYPE},@var{PROGRAM_UNIT_ID},features,@var{FEATURE_SET_ID},feature_class,@var{FEATURE_CLASS_ID}
@end example

The role of each variable is as follows:

@itemize
@item
@var{SRC_PATH} - The path to the source program. This identifies the
source file which the features correspond to.

@item
@var{PROGRAM_UNIT_TYPE} - The type of program unit which the
features are for. Currently used values are @b{module} and
@b{function}.

@item
@var{PROGRAM_UNIT_ID} - A string identifier of the specific
program unit in the file. The tuple consisting of @var{SRC_PATH},
@var{PROGRAM_UNIT_TYPE} and @var{PROGRAM_UNIT_ID} is enough to
unique identify the program unit which the feature set corresponds
to.

@item
@var{FEATURE_SET_ID} - A numerical identifier which identifies
the set of extracted features in the MAGEEC database file.

@item
@var{FEATURE_CLASS_ID} - A numerical identifier for the 'class'
of features which the feature set belongs to. When features
are used to train a machine learner, each 'class' of features is
trained seperately. This identifier is generally used to
seperate function and module features, so that they are handled
independently by the machine learner.
@end itemize

An example of potential output is as follows:

@example
/home/mageec/test/banana.c,module,banana.c,features,82671682,feature_class,0
/home/mageec/test/banana.c,function,potato,features,19992772,feature_class,1
...
@end example

@subsection Usage notes

Note that when performing the feature extraction, it is
not safe to do a build in parallel if all of the compilation
processes have the same file to store output features.
When this happens, all of the process may try to write
to the output file at the same time, corrupting the
entries.

@subsection Example usage

gcc -fplugin=/path/to/libgcc_feature_extract.so
    -fplugin-arg-libgcc_feature_extract-database=my_database.db
    -fplugin-arg-out=features.csv
    foo.c bar.c -o a.out

cmake -DCMAKE_C_FLAGS="-fplugin=/path/to/libgcc_feature_extract.so
      -fplugin-arg-libgcc_feature_extract-database=my_database.db
      -fplugin-arg-out=features.csv"

@node Glossary
@chapter Glossary

@menu
* GCC plugin features::
@end menu

@node GCC plugin features
@section GCC plugin features

@subsection Function features

@include function-features.texi

@subsection Module features

@include module-features.texi

@node GNU Free Documentation License
@chapter GNU Free Documentation License
@include fdl-1.3.texi

@bye
